{
	"JudgeDatabase":"jdbc:postgresql://localhost:5432/postgres?allowMultiQueries=true&currentSchema=trigger_test_database&reWriteBatchedInserts=true",
	"beforeInput": null,
	"userInput": "set search_path = \"trigger_test_database\";create or replace function valid_check()\n    returns trigger\nas $$\n    declare\n        address_code varchar;\n        city varchar;\n        province varchar;\n        address varchar;\n        birthday varchar;\n        checksum int;\n        origin_cs int;\n    begin\n\n        --address\n        address_code := substring(new.id, 1, 6);\n        select name into address\n        from district\n        where code = address_code;\n        if address is null\n        then\n            raise exception 'invalid address code';\n        else\n            if substring(address_code, 3, 4) = '0000'\n            then\n                new.address := address;\n            elseif substring(address_code, 5, 2) = '00'\n            then\n                select name into province\n                from district where code = substring(address_code, 1, 2) || '0000';\n                new.address := province || ',' || address;\n            else\n                select name into province\n                from district where code = substring(address_code, 1, 2) || '0000';\n                select name into city\n                from district where code = substring(address_code, 1, 4) || '00';\n                if city is not null\n                then\n                    new.address := province || ',' || city || ',' || address;\n                else\n                    new.address := province || ',' || address;\n                end if;\n            end if;\n        end if;\n\n        --birthday\n        select to_char(to_date(substring(new.id, 7, 8), 'yyyyMMdd'), 'yyyyMMdd') into birthday;\n        if birthday <> substring(new.id, 7, 8)\n        then\n            raise exception 'invalid birthday';\n        elseif to_date(substring(new.id, 7, 8), 'yyyyMMdd') < '1900-01-01'::date\n        then\n            raise exception 'invalid birthday';\n        else\n            new.birthday := birthday;\n        end if;\n\n        --checksum\n        checksum := 0;\n        for i in 1 .. 17 loop\n            checksum := checksum + (mod(pow(2,18-i)::integer, 11) * substring(new.id, i, 1)::integer);\n        end loop;\n        checksum := mod(12 - mod(checksum, 11), 11);\n        if substring(new.id, 18, 1) = 'X'\n        then\n            origin_cs := 10;\n        else\n            origin_cs := substring(new.id, 18, 1)::integer;\n        end if;\n        if origin_cs <> checksum\n        then\n            raise exception 'wrong checksum';\n        end if;\n        return new;\n    end;\n    $$\nlanguage plpgsql;",
	"afterInput": "CREATE TRIGGER people_trigger BEFORE INSERT on people FOR EACH ROW EXECUTE PROCEDURE valid_check();\nINSERT INTO people VALUES ('130631190002140071','张三');INSERT INTO people VALUES ('130631190002140079','张三');INSERT INTO people VALUES ('44190019971024031X','李四');INSERT INTO people VALUES ('441900199710240311','李四');INSERT INTO people VALUES ('441881202011116667','王五');INSERT INTO people VALUES ('44188120201111666X','王五');INSERT INTO people VALUES ('001122192303127898','Lisa');INSERT INTO people VALUES ('001122192303127892','Lisa');INSERT INTO people VALUES ('110108186701310096','乃万');INSERT INTO people VALUES ('110108186701310090','乃万');INSERT INTO people VALUES ('130209192705264310','风清扬');INSERT INTO people VALUES ('130209192705264314','风清扬');INSERT INTO people VALUES ('140926193309253012','慕容复');INSERT INTO people VALUES ('14092619330925301X','慕容复');INSERT INTO people VALUES ('141022197702022098','虚竹');INSERT INTO people VALUES ('141022197702022091','虚竹');INSERT INTO people VALUES ('150223197604312209','张小龙');INSERT INTO people VALUES ('15022319760431220X','张小龙');INSERT INTO people VALUES ('150223199902292196','pony');INSERT INTO people VALUES ('15022319990229219X','pony');INSERT INTO people VALUES ('150223200002292137','martin');INSERT INTO people VALUES ('15022320000229213X','martin');INSERT INTO people VALUES ('150400202001002228','Tom');INSERT INTO people VALUES ('15040020200100222X','Tom');INSERT INTO people VALUES ('150600201802291118','张无忌');INSERT INTO people VALUES ('15060020180229111X','张无忌');INSERT INTO people VALUES ('210106188802331902','赵敏');INSERT INTO people VALUES ('21010618880233190X','赵敏');INSERT INTO people VALUES ('210106999903040011','段誉');INSERT INTO people VALUES ('21010699990304001X','段誉');INSERT INTO people VALUES ('210505197503210043','李秋水');INSERT INTO people VALUES ('21050519750321004X','李秋水');INSERT INTO people VALUES ('210700197404060026','李沧海');INSERT INTO people VALUES ('21070019740406002X','李沧海');INSERT INTO people VALUES ('210700177707210898','逍遥子');INSERT INTO people VALUES ('210700177707210890','逍遥子');INSERT INTO people VALUES ('210902197107210992','无崖子');INSERT INTO people VALUES ('21090219710721099X','无崖子');INSERT INTO people VALUES ('310117192507121990','郭靖');INSERT INTO people VALUES ('31011719250712199X','郭靖');INSERT INTO people VALUES ('310117202506008888','黄蓉');INSERT INTO people VALUES ('31011720250600888X','黄蓉');INSERT INTO people VALUES ('140106199903310217','小龙女');INSERT INTO people VALUES ('14010619990331021X','小龙女');INSERT INTO people VALUES ('320206199809230041','杨过');INSERT INTO people VALUES ('320206199809230042','杨过');INSERT INTO people VALUES ('320206299907051985','杨逍');INSERT INTO people VALUES ('320206299907051983','杨逍');INSERT INTO people VALUES ('421122321011121976','韦一笑');INSERT INTO people VALUES ('421122321011121978','韦一笑');select id,name,address,birthday from people;",
	"standardAnswer": ["id|name|address|birthday",
	"130631190002140071|张三|河北省,保定市,望都县|19000214", 
	"44190019971024031X|李四|广东省,东莞市|19971024",
	"441881202011116667|王五|广东省,清远市,英德市|20201111",
	"130209192705264310|风清扬|河北省,唐山市,曹妃甸区|19270526",
	"140926193309253012|慕容复|山西省,忻州市,静乐县|19330925",
	"141022197702022098|虚竹|山西省,临汾市,翼城县|19770202",
	"150223200002292137|martin|内蒙古自治区,包头市,达尔罕茂明安联合旗|20000229",
	"210106999903040011|段誉|辽宁省,沈阳市,铁西区|99990304",
	"210505197503210043|李秋水|辽宁省,本溪市,南芬区|19750321",
	"210700197404060026|李沧海|辽宁省,锦州市|19740406",
	"210902197107210992|无崖子|辽宁省,阜新市,海州区|19710721",
	"310117192507121990|郭靖|上海市,松江区|19250712",
	"140106199903310217|小龙女|山西省,太原市,迎泽区|19990331",
	"320206199809230041|杨过|江苏省,无锡市,惠山区|19980923",
	"320206299907051985|杨逍|江苏省,无锡市,惠山区|29990705",
	"421122321011121976|韦一笑|湖北省,黄冈市,红安县|32101112"],
	"timeLimit": 10000
}