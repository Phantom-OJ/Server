<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sustech.edu.phantom.dboj.mapper.RecordMapper">

    <select id="queryRecord" resultType="sustech.edu.phantom.dboj.entity.po.Record">
        select id,
               code_id,
               id,
               code_id,
               user_id,
               problem_id,
               score,
               result,
               space,
               time,
               dialect,
               code_length,
               submit_time
        from "record"
        where valid
        offset #{offset} limit #{limit};
    </select>
    <insert id="saveRecord" keyProperty="id" useGeneratedKeys="true">
        insert into "record" (code_id, user_id, problem_id, result, score, space, time, dialect, code_length,
                              submit_time)
        VALUES (#{codeId}, #{userId}, #{problemId}, #{result}, #{score}, #{space}, #{time}, #{dialect},
                #{codeLength}, #{submitTime});
    </insert>
    <update id="invalidateRecord">
        update "record"
        set valid = false
        where id = #{id};
    </update>
    <update id="invalidOneAssignmentRecord">
        update "record"
        set valid = false
        where problem_id in (
        <foreach collection="pids" item="p" index="index" separator="," close=")">
            #{p}
        </foreach>
        ;
    </update>
    <select id="getAllRecords" resultType="sustech.edu.phantom.dboj.entity.po.Record">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               u.avatar,
               u.nickname as username
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
        order by r.submit_time desc
        offset #{offset} limit #{limit};
    </select>
    <select id="getProblemResultSet" resultType="sustech.edu.phantom.dboj.form.stat.ProblemStat">
        select result as key, count(*) as count
        from "record"
        where valid
          and problem_id = #{id}
        group by result;
    </select>
    <select id="getProblemDialectSet" resultType="sustech.edu.phantom.dboj.form.stat.ProblemStat">
        select dialect as key, count(*) as count
        from "record"
        where valid
          and problem_id = #{id}
        group by dialect;
    </select>
    <select id="getUserDialectSet" resultType="sustech.edu.phantom.dboj.form.stat.ProblemStat">
        select dialect as key, count(*) as count
        from "record"
        where valid
          and user_id = #{id}
        group by dialect;
    </select>
    <select id="getUserResultSet" resultType="sustech.edu.phantom.dboj.form.stat.ProblemStat">
        select result as key, count(*) as count
        from "record"
        where valid
          and user_id = #{id}
        group by result;
    </select>
    <select id="getOneRecord" resultType="sustech.edu.phantom.dboj.entity.vo.RecordDetail">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               c.code,
               u.nickname as username,
               u.avatar
        from record r
                 join code c on r.code_id = c.id and c.valid
                 join problem p on r.problem_id = p.id and p.valid
                 join "user" u on u.id = r.user_id and u.valid
        where r.valid
          and r.id = #{id};
    </select>
    <select id="getRecordsOfOnePerson" resultType="sustech.edu.phantom.dboj.entity.po.Record">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               u.avatar,
               u.nickname as username
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
          and r.user_id = #{userId}
        order by submit_time desc
        offset #{param1.offset} limit #{param1.limit};
    </select>
    <select id="getRecordsOfPersonByAssignment" resultType="sustech.edu.phantom.dboj.entity.po.Record">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               u.avatar,
               u.nickname as username
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid
                 join "assignment" a
                      on p.assignment_id = a.id and a.valid and a.title like '%' || #{assignmentTitle} || '%'
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
          and r.user_id = #{userId}
        order by submit_time desc
        offset #{param1.offset} limit #{param1.limit};
    </select>
    <select id="getRecordsOfPersonByProblem" resultType="sustech.edu.phantom.dboj.entity.po.Record">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               u.avatar,
               u.nickname as username
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid and p.title like '%' || #{problemTitle} || '%'
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
          and r.user_id = #{userId}
        order by submit_time desc
        offset #{param1.offset} limit #{param1.limit};
    </select>
    <select id="getRecordsOfPersonByAssignmentAndProblem" resultType="sustech.edu.phantom.dboj.entity.vo.RecordDetail">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               u.avatar,
               u.nickname as username
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid and p.title like '%' || #{problemTitle} || '%'
                 join "assignment" a
                      on p.assignment_id = a.id and a.valid and a.title like '%' || #{assignmentTitle} || '%'
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
          and r.user_id = #{userId}
        order by submit_time desc
        offset #{param1.offset} limit #{param1.limit};
    </select>
    <select id="getRecordsOfPersonByAssignmentAndProblemCounter" resultType="java.lang.Integer">
        select count(*)
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid and p.title like '%' || #{problemTitle} || '%'
                 join "assignment" a
                      on p.assignment_id = a.id and a.valid and a.title like '%' || #{assignmentTitle} || '%'
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
          and r.user_id = #{userId};
    </select>
    <select id="getRecordsByAssignment" resultType="sustech.edu.phantom.dboj.entity.po.Record">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               u.avatar,
               u.nickname as username
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid
                 join "assignment" a
                      on p.assignment_id = a.id and a.valid and a.title like '%' || #{assignmentTitle} || '%'
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
        order by submit_time desc
        offset #{param1.offset} limit #{param1.limit};
    </select>
    <select id="getRecordsByProblem" resultType="sustech.edu.phantom.dboj.entity.po.Record">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               u.avatar,
               u.nickname as username
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid and p.title like '%' || #{problemTitle} || '%'
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
        order by submit_time desc
        offset #{param1.offset} limit #{param1.limit};
    </select>
    <select id="getRecordsByAssignmentAndProblem" resultType="sustech.edu.phantom.dboj.entity.vo.RecordDetail">
        select r.id,
               r.code_id,
               r.user_id,
               r.problem_id,
               r.score,
               r.result,
               r.space,
               r.time,
               r.dialect,
               r.code_length,
               r.submit_time,
               p.title    as problem_title,
               u.avatar,
               u.nickname as username
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid and p.title like '%' || #{problemTitle} || '%'
                 join "assignment" a
                      on p.assignment_id = a.id and a.valid and a.title like '%' || #{assignmentTitle} || '%'
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid
        order by submit_time desc
        offset #{param1.offset} limit #{param1.limit};
    </select>
    <select id="getRecordsByAssignmentAndProblemCounter" resultType="java.lang.Integer">
        select count(*)
        from "record" r
                 join "problem" p on r.problem_id = p.id and p.valid and p.title like '%' || #{problemTitle} || '%'
                 join "assignment" a
                      on p.assignment_id = a.id and a.valid and a.title like '%' || #{assignmentTitle} || '%'
                 join "user" u on r.user_id = u.id and u.valid
        where r.valid;
    </select>
    <select id="getUserIdByCodeId" resultType="java.lang.Integer">
        select user_id
        from "record"
        where valid
          and code_id = #{cid};
    </select>
    <select id="isSolvedByUser" resultType="sustech.edu.phantom.dboj.entity.po.ResultCnt">
        select result, count(*) as count
        from "record"
        where user_id = #{uid}
          and problem_id = #{pid}
          and valid
        group by result;
    </select>
    <select id="counterOneAssignmentAC" resultType="sustech.edu.phantom.dboj.entity.po.AssignmentCount">
        select problem_id, count(*)
        from (
                 select distinct problem_id, user_id
                 from "record"
                 where valid
                   and problem_id in (1, 2, 3, 4, 5)
                   and result = 'AC') x
        group by problem_id
        order by problem_id;
    </select>
    <select id="counterOneAssignment" resultType="java.lang.Integer">
        select count(distinct user_id)
        from "user_group"
        where valid
          and group_id in (
            select distinct group_id
            from "assignment_group"
            where assignment_id = #{aid}
              and valid);
    </select>
    <select id="counterOneAssignmentNotAC" resultType="sustech.edu.phantom.dboj.entity.po.AssignmentCount">
        select problem_id, count(*) from (
        select distinct problem_id, user_id
        from "record"
        where valid
        and problem_id in (
        <foreach collection="list" separator="," close="" item="l" index="index">
            #{l.id}
        </foreach>
        )
        and result &lt;&gt; 'AC'
        except
        select distinct problem_id, user_id
        from "record"
        where valid
        and problem_id in (
        <foreach collection="list" separator="," close="" item="l" index="index">
            #{l.id}
        </foreach>
        )
        and result = 'AC') x group by problem_id
        order by problem_id;
    </select>
    <select id="getHomeStat" resultType="sustech.edu.phantom.dboj.form.stat.HomeStat">
        select cast(substr(cast(to_timestamp(submit_time / 1000) as varchar), 1, 10) as date) as date,
               count(*)                                                                       as total,
               sum(case record.result when 'AC' then 1 else 0 end)                            as ac
        from record
        where valid
        group by date
        order by date
        limit 20;
    </select>

</mapper>